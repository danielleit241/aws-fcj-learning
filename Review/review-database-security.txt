1. DATABASE

- AMAZON RDS (AMAZON RELATIONAL DATABASE SERVICE):
	+ LÀ MỘT DỊCH VỤ CSDL QUAN HỆ ĐƯỢC QUẢN LÝ BỞI AWS 
	+ TA SẼ CÓ 6 ENGINE: AURORA, MYSQL, POSTGRESQL, MARIADB, SQL SERVER, ORACLE
		-> VỚI MỖI ENGINE SẼ CÓ TÀI LIỆU RIÊNG -> BẢN CHẤT LÀ NHỮNG CSDL KHÁC NHAU -> BÊN TRONG ENGINE CŨNG KHÁC NHAU
	
	+ CÁC LỢI ÍCH CHÍNH:
		+ VIỆC QUẢN LÝ CSDL VÔ CÙNG PHỨC TẠP TỪ RẤT NHIỀU HƯỚNG, VÀ VIỆC QUẢN LÝ HẠ TẦNG CỰC KÌ PHỨC TẠP (SCALE IN SCALE OUT, BACKUP DATABASE, RESTORE DATABASE, PATCH, UPDATE VERSION, OS, ...) -> AWS SẼ QUẢN LÝ HOÀN TOÀN RDS -> GIẢM BỚT CÁC CÔNG VIỆC Ở PHÍA HẠ TẦNG
		+ GIÚP CHO KHÁCH HÀNG TẬP TRUNG CÁC CÔNG VIỆC Ở PHÍA ỨNG DỤNG -> TA SẼ KHÔNG CẦN TRUY CẬP TRỰC TIẾP VÀO CSDL NỮA MÀ CHỈ LÀM VIỆC BÊN PHÍA CLIENT THÔNG QUA AMAZON MANAGEMENT CONSOLE	
			+ CÓ TÙY CHỌN: MULTI-AZ, TĂNG SCALE, THAY ĐỔI CẤU HÌNH CỦA CSDL, TĂNG HIỆU NĂNG LƯU TRỮ CỦA CSDL MÀ KHÔNG CÓ DOWNTIME

	==> TẬP TRUNG VÀO VIỆC QUẢN LÝ CSDL Ở MỨC ỨNG DỤNG VÌ AWS ĐÃ LO VIỆC QUẢN LÝ CSDL Ở MỨC HẠ TẦNG
		+ KHÁCH HÀNG:
			- THIẾT KẾ SCHEMA
			- THỰC HIỆN VÀ TỐI ƯU CÂU TRUY VẤN
		+ AWS:
			- FAIL-OVER, SAO LƯU VÀ PHỤC HỒI
			- BẢO MẬT VÀ CÔ LẬP
			- ...

- MONITORING RDS/AURORA DATABASE:
	- TA SẼ MONITOR NHIỀU KHÍA CẠNH KHÁC NHAU CỦA CSDL
		+ VỀ KHÍA CẠNH MÁY CHỦ ẢO -> TA SẼ SỬ DỤNG CÔNG CỤ AMAZON CLOUDWATCH -> HIỂN THỊ CPU, MEMORY, IOPS, ... -> CHỈ GIỚI HẠN Ở MỨC AWS RESOURCE 
		+ VỀ KHÍA CẠNH HỆ ĐIỀU HÀNH BÊN TRONG MÁY CHỈ ẢO -> NẾU TA SỬ DỤNG EC2 THÌ SẼ PHẢI TỰ LO, CÒN NẾU SỬ DỤNG RDS THÌ SẼ DÙNG  RDS ENHANCED MONITORING ĐỂ CÓ THỂ MONITOR ĐƯỢC
		+ VỀ KHÍA CẠNH ENGINE -> TA SẼ DÙNG RDS PERFORMANCE INSIGHTS -> CUNG CẤP INSIGHTS VỀ CÁC CÂU TRUY VẤN ĐANG TỐN NHIỀU TÀI NGUYÊN NHẤT ĐỂ TỐI ƯU CÂU TRUY VẤN

- MULTI-AZ DEPLOYMENTS:
	+ BEST PRACTICES CƠ BẢN LÀ DEPLOY LÊN 2 AZS 
	+ KHI TA BẬT CƠ CHẾ MULTI-AZ -> SẼ CÓ 2 DATABASE 1 PRIMARY VÀ 1 STANDBY (SẼ REPLICATE BẰNG CƠ CHẾ SYNCHRONOUS -> ĐẢM BẢO 2 DỮ LIỆU CỦA DATABASE LÀ ĐỒNG NHẤT VỀ THỜI GIAN THỰC) -> CHỈ CẦN MỘT CÚ CLICK LÀ LÀM ĐƯỢC ĐIỀU NÀY

- READ REPLICAS:
	+ BAN ĐẦU LÀ ĐƯỢC DÙNG ĐỂ READ SCALING -> SAU ĐÓ ĐƯỢC DÙNG LÀM DISATER RECOVERY
	+ TA CÓ MỘT ỨNG DỤNG KẾT NỐI VỚI CSDL PRIMARY, SAU ĐÓ TA LẠI CÓ MỘT ỨNG DỤNG REPORTING CHỈ CẦN ĐỌC DỮ LIỆU NẾU NHƯ TA DÙNG CHUNG PRIMARY THÌ SẼ CÓ TÌNH TRẠNG ẢNH HƯỞNG ĐẾN DATABASE Ở TRÊN -> TA SẼ DÙNG CSDL READ REPLICA CHỈ DÙNG ĐỂ ĐỌC DỮ LIỆU 
	=> VỀ CƠ CHẾ READ REPLICATION SẼ SỬ DỤNG CƠ CHẾ ASYNC THAY VÌ SYNC NHƯ TRÊN MULTI-AZ DEPLOYMENT -> HẠN CHẾ VỀ ẢNH HƯỞNG VỀ PERFORMANCE

- AUTOMATED BACKUPS:
	+ MẶC ĐỊNH LÀ 7 NGÀY, MAX LÀ 35 NGÀY
	
- DATABASE SNAPSHOTS:
	+ LÀ MỘT CƠ CHẾ MANUALY -> SẼ LƯU TRỮ THỜI GIAN DÀI HƠN SO VỚI BACKUPS -> TOÀN BỘ DỮ LIỆU SẼ ĐƯỢC LƯU Ở S3 (AWS QUẢN LÝ)
	
- AMAZON AURORA:
	+ MỤC TIÊU CỦA AWS KHI TẠO RA AURORA -> XÂY DỰNG CSDL ĐÁP ỨNG ĐƯỢC NHƯ CẦU CỦA DOANH NGHIỆP LỚN -> CHI PHÍ LẠI NGANG BẰNG SO VỚI OPEN SOURCES -> TƯƠNG TỰ CÁC TÍNH NĂNG VỚI RDS NHƯNG ĐEM LẠI ĐƯỢC MỘT PERFORMANCE TỐT HƠN 
	+ HIỆU NĂNG CỦA AURORA SO SÁNH GẤP 5 LẦN SO VỚI MYSQL, VÀ 3 LẦN SO VỚI POSTGRESQL (HIỆU NĂNG ĐẠT ĐƯỢC KHI CÓ SỐ LƯỢNG TRUY CẬP LỚN) -> SO VỚI MÔI TRƯỜNG RDS

	+ VỚI CSDL TRUYỀN THỐNG -> THƯỜNG SẼ ĐỌC/GHI DỮ LIỆU -> THAO TÁC CHÍNH -> VIỆC ĐỌC GHI DỮ LIỆU SẼ PHỤ THUỘC VÀO PHẦN LƯU TRỮ ĐÍNH KÈM (ATTACHED STORAGE) 

- VỀ BẢN CHẤT CỦA RDS LÀ MỘT EC2 -> VÌ NÓ LÀ EC2 NÊN NÓ CŨNG SẼ KẾT NỐI ĐẾN EBS 
	- NHƯNG AURORA THÌ LẠI KHÁC -> DÙNG MỘT CLUSTER STORAGE VOLUME -> SPAN RA CẢ 3 AZS -> DÙNG MỘT ĐƯỜNG MẠNG RIÊNG (THAY VÌ DÙNG CHUNG MẠNG EBS) -> ĐƯỢC CHIA RA VÀ QUẢN LÝ TRÊN HÀNG TRĂM CÁC NODES KHÁC NHAU 

- VỀ VIỆC LƯU TRỮ TRONG AURORA -> SẼ CÓ WRITER VÀ READER -> TẤT CẢ ĐIỀU CHUNG MỘT VOLUME DUY NHẤT LÀ CLUSTER STORAGE VOLUME -> VIỆC CỦA THẰNG NÀO THÌ THẰNG ĐÓ SẼ ĐÓNG VAI TRÒ THỰC HIỆN (MỖI MỘT READER NODE ĐỀU CÓ THỂ TRỞ THÀNH WRITER VÀ NGƯỢC LẠI MÀ KHÔNG CÓ ĐỘ TRỄ)

- DATABASE MIGRATION -> DỊCH VỤ ĐẦU TIÊN LÀ AWS DATABASE MIGRATION SERVICE
	+ LÀ MỘT DỊCH VỤ ĐƯỢC QUẢN LÝ HOÀN TOÀN TRÊN AWS -> GIÚP CHO VIỆC MIGRATION DỮ LIỆU TRỞ NÊN DỄ DÀNG HƠN
	+ KHI TA CẤU HÌNH TA CÓ THỂ CẤU HÌNH SOURCE VÀ TARGET KHÁC NHAU -> VÍ DỤ SOURCE ORACEL THÌ TARGET CÓ THỂ LÀ CÁC DATABASE ENGINE KHÁC THẬM CHÍ LÀ NOSQL HOẶC DATABASE WAREHOUSE CỦA AWS
		=> TẬP TRUNG VÀO DỮ LIỆU
	+ TA SẼ TẠO RA CÁC MIGRATION TASK -> KẾT NỐI TỪ SOURCE DATABSE ĐẾN TARGET DATABASE -> TẠO RA CÁC REPLICATION INSTANCE
	-> CÁI MIGRATION CHỈ LÀ DỮ LIỆU

- THAY VÌ MIGRATION DỮ LIỆU THÌ TA MUỐN MIGRATION CẢ 2 ENGINE KHÁC NHAU THÌ TA SẼ CÓ CÔNG CỤ LÀ AWS SCHEMA CONVERSION TOOL (SCT)
	- TỰ ĐỘNG PHÂN TÍCH CẤU HÌNH SCHEMA SOURCE VÀ CỐ GẮNG TẠO RA MỘT SCHEMA TƯƠNG THÍCH VỚI TARGET
	-> TUY NHIÊN NỖ LỰC ĐỂ CONVERT SẼ KHÔNG PHẢI LÀ 100%, NHỮNG TRƯỜNG HỢP THÀNH CÔNG SẼ OK, CÒN NẾU KO THÀNH CÔNG SẼ CẢNH BÁO ĐỂ NGƯỜI DÙNG CÓ THỂ TỰ CHỈNH SỬA

- NGÀY XƯA KHI XÂY DỰNG ỨNG DỤNG SẼ XÂY DỰNG VỚI CÁC CSDL TA CẢM THẤY QUEN THUỘC NHẤT -> PURPOSE DB SẼ CHỌN RA CÁC CSDL PHÙ HỢP NHẤT THAY VÌ CHỈ DÙNG DUY NHẤT MỘT CSDL -> MỖI CSDL ĐỀU KHÔNG HOÀN HẢO MÀ CHỈ PHÙ HỢP VỚI TỪNG MỤC ĐÍCH SỬ DỤNG NÀO ĐÓ


- AMAZON DYNAMODB:
	+ LÀ MỘT DỊCH VỤ DỰA TRÊN DYNAMO PAPER VÀO NĂM 2007 SAU ĐÓ RA ĐỜI VÀO 2012 -> DYNAMO DB ĐƯỢC SỬ DỤNG TRÊN CÁC DỊCH VỤ QUAN TRỌNG NHẤT CỦA DYNAMODB -> HIỆU NĂNG CỰC KÌ KHỦNG KHIẾP ĐỂ ĐÁP ỨNG CÁC NHU CẦU CỦA HÀNG TRĂM TRIỆU NGƯỜI DÙNG

	+ ĐỐI VỚI DYNAMODB LÀ MỘT SERVERLESS DB -> TỨC LÀ TA KHÔNG QUẢN LÝ MÁY CHỦ NỮA MÀ SẼ LÀM VIỆC TRÊN CONSOLE CỦA AWS -> CÓ ENDPOINT ĐỂ SỬ DỤNG
		-> TA SẼ TỔ CHỨC DỮ LIỆU DYNAMODB TRÊN DẠNG BẢNG -> CÒN BÊN DƯỚI HOẠT ĐỘNG NHƯ THẾ NÀO THÌ TA SẼ KHÔNG CẦN CAN THIỆP VÀO
		-> LÀM THẾ NÀO ĐỂ XÁC ĐỊNH ĐƯỢC HIỆU NĂNG -> DỰA TRÊN WRITE/READ CAPACITY UNIT -> DO CHÍNH TA SETUP CÁC THÔNG SỐ NÀY -> SETUP SỐ CÀNG CAO THÌ Ở BÊN DƯỚI SẼ CÓ NHIỀU PARTITION

2. DATA LAKE
- VIỆC SỬ DỤNG DỮ LIỆU TRONG DOANH NGHIỆP CÀNG NGÀY CÀNG QUAN TRỌNG TRONG VIỆC KINH DOANH -> TUY NHIÊN VIỆC SỬ DỤNG DỮ LIỆU CÀNG NGÀY CÀNG ĐA DẠNG HƠN -> LÀM SAO HỆ THỐNG PHÂN TÍCH DỮ LIỆU CÓ THỂ PHỤC VỤ NHIỀU NGƯỜI, CHI PHÍ THẤP, HIỆU NĂNG CAO -> PHÂN TÍCH ĐA DẠNG DỮ LIỆU TỪ CSDL, STREAMING, BATCH, REAL-TIME, ... 

- DATA LAKE LÀ MỘT NƠI LƯU TRỮ DỮ LIỆU TẬP TRUNG TỪ NHIỀU NGUỒN, NHIỀU FORMAT DỮ LIỆU KHÁC NHAU VÀ ĐƯỢC TÍCH HỢP CÁC CÔNG CỤ PHÂN TÍCH DỮ LIỆU
	+ TRÁI TIM CỦA DATA LAKE SẼ LÀ MỘT NƠI LƯU TRỮ DỮ LIỆU NHƯ S3


3. SECURITY

- SHARED RESPONSIBILITY MODEL (MÔ HÌNH CHIA SẺ TRÁCH NHIỆM):
	+ KHI NÓI VỀ BẢO MẬT THÌ SẼ LÀ VIỆC CHIA SẺ GIỮA KHÁCH HÀNG VÀ AWS
	+ AWS: SẼ CHỊU TRÁCH NHIỆM CHO VIỆC BẢO MẬT CÁC CS HẠ TẦNG VẬT LÝ, VỀ TÍNH TOÁN, LƯU TRỮ, MẠNG, ẢO HÓA, ...
		-> AWS SẼ CUNG CẤP TÀI LIỆU, DỊCH VỤ ĐỂ KHÁCH HÀNG CÓ THỂ ĐẠT ĐƯỢC MỨC BẢO MẬT VÀ AN TOÀN NHẤT CÓ THỂ
	+ KHÁCH HÀNG: SẼ CHỊU TRÁCH NHIỆM CHO VIỆC CẤU HÌNH BẢO MẬT TỪ TƯỞNG LỬA, HỆ ĐIỀU HÀNH, CHỊU TRÁCH NHIỆM BẢO MẬT CHO PHẦN ỨNG DỤNG, PHÂN QUYỀN, TÀI KHOẢN

	+ TOÀN BỘ NHỮNG DỊCH VỤ SECURITY OFF THE CLOUD SẼ ĐƯỢC AWS QUẢN LÝ HOÀN TOÀN
		-> TOÀN BỘ NHỮNG DỊCH VỤ SECURITY ON THE CLOUD THÌ KHÁCH HÀNG SẼ PHẢI THỰC HIỆN VÀ QUẢN LÝ BỞI KHÁCH HÀNG
	=> AWS CUNG CẤP CÔNG CỤ VÀ BEST PRACTICE ĐỂ CHO TÍNH BẢO MẬT SẼ CAO NHẤT CÓ THỂ VÌ MỖI TỔ CHỨC SẼ CÓ NHU CẦU KHÁC NHAU VÀ CÁCH THỨC BẢO MẬT KHÁC NHAU CHO NÊN KHÔNG CÓ MỘT QUY CHUẨN NÀO CHUNG CẢ -> CUNG CẤP TÀI LIỆU, CÔNG CỤ, CON NGƯỜI TƯ VẤN -> TÙY VÀO NHU CẦU 

	- NGOÀI RA AWS CŨNG ĐƯỢC CERTIFIED BỞI CÁC TỔ CHỨC THỨ 3 VỀ TUÂN THỦ BẢO MẬT -> DÙNG AWS SẼ ĐƯỢC THỪA HƯỞNG CÁC BẢO MẬT VÀ TUÂN THỦ ĐÓ -> TRÁCH NHIỆM SẼ CỦA 2 BÊN CHỨ KO PHẢI DÙNG AWS LÀ 100% SẼ ĐƯỢC CERTIFIED NGAY

- IAM (IDENTITY ACCESS MANAGEMENT):
	- LÀ DỊCH VỤ QUẢN LÝ ĐỊNH DANH VÀ QUYỀN TRUY CẬP
		+ LÀ VIỆC QUẢN LÝ CÁC CHỦ THỂ, CHỨNG THỰC VÀ QUYỀN CỦA HỌ 
	-> BIẾT ĐƯỢC HỆ THỐNG CÓ NHỮNG AI, LÀM THẾ NÀO ĐỂ CHỨNG THỰC ĐƯỢC HỌ, VÀ HỌ CÓ QUYỀN HẠN GÌ TRONG HỆ THỐNG

	- AAA WITH AWS:
		+ AUTHENTICATE:
			USERNAME/PASSWORD + MFA
			ACCESS KEY + MFA
			FEDERATION
		+ AUTHORIZE:
			IAM POLICIES
		+ AUDIT:
			CLOUDTRAIL -> ĐẢM BẢO LƯU LẠI ĐƯỢC CÁC HOẠT ĐỘNG TRONG TÀI KHOẢN AWS 
				LƯU TRỮ LOGS ĐỂ PHÂN TÍCH SAU NHAU

	- AWS PRINCIPALS:
		+ ROOT ACCOUNT LÀ THÔNG TIN QUAN TRỌNG NHẤT CỦA ACCOUNT AWS -> LÀ THÔNG TIN BAN ĐẦU KHI ĐĂNG KÍ ACCOUNT CỦA AWS -> CÓ QUYỀN CAO NHẤT 
			-> TRONG THỰC TẾ TA SẼ KHÔNG SỬ DỤNG ROOT ACCOUNT NÀY -> THAY VÀO ĐÓ CHỈ CẤU HÌNH ĐA LỚP, CẤU HÌNH BẢO MẬT CAO NHẤT
	
		+ IAM USERS, GROUP, ROLE -> MỤC TIÊU CHỈ CHO TRUY CẬP VÀ SỬ DỤNG MỘT VÀI DỊCH VỤ NHẤT ĐỊNH, HOẶC GỬI CÁC API ĐẾN AWS ENDPOINTS
		
		+ THÔNG TIN CHỨNG THỰC TẠM THỜI -> TRUY CẬP VÀO MỘT VÀI DỊCH VỤ NHẤT ĐỊNH TRONG KHOẢNG THỜI GIAN NHẤT ĐỊNH NÀO ĐÓ

- AWS IDENTITY AUTHENTICATION
	+ AWS MANAGEMENT CONSOLE -> THÔNG QUA USERNAME/PASSWORDS
	+ API ACCESS -> ACCESS THÔNG QUA KEYS

	- ĐỐI VỚI TIME-LIMITED ACCES -> TA SẼ SỬ DỤNG DỊCH VỤ AWS SECURITY TOKEN SERVICE SẼ CHO TA MỘT KEY TẠM THỜI TRONG THỜI GIAN NÀO ĐÓ -> BEST PRACTICE THAY VÌ SỬ DỤNG ACCESS KEY VĨNH VIỄN

- AWS IDNETITY AUTHORIZATION AND PRIVILEGES:
	+ NHỮNG PHÂN QUYỀN SẼ ĐƯỢC DEFINE Ở MỨC NGƯỜI DÙNG HOẶC TÀI NGUYÊN AWS 
		-> Ở MỨC NGƯỜI DÙNG CÓ QUYỀN TRUY CẬP VÀO MỘT S3 BUCKET -> ĐƯỢC GÁN MỘT RESOURCE POLICY CHO PHÉP ÔNG A ĐƯỢC TRUY CẬP
	
- AWS IAM HIERARCHY OF PRIVILEGE: 
	-> USER ROOT LÀ CAO NHẤT -> IAM USER -> TEMP


4. AWS DIRECTORY SERVICE
	- ĐỐI VỚI WORKLOAD WINDOW -> LÀ MỘT MÔI TRƯỜNG QUẢN LÝ NHIỀU CÁC DỊCH VỤ CỦA MICROSOFT 
	-> AWS DIRECTORY SERVICE SẼ DỰA TRÊN WINDOW SERVER SẼ CUNG CẤP CÁC TÍNH NĂNG TƯƠNG THÍCH VỚI MICROSOFT ACTIVE-DIRECTORY -> CHO PHÉP CUNG CẤP TÍNH NĂNG CONNECTOR CHO PHÉP KẾT NỐI TỚI MÔI TRƯỜNG ONPREMISE 

	=> MỤC TIÊU SỬ DỤNG NHỮNG THÔNG TIN CỦA TỔ CHỨC ĐỂ CHỨNG THỰC CÁC ỨNG DỤNG BASED TRÊN AWS 

5. AWS ORGANIZATION
- LÀ MỘT DỊCH VỤ QUẢN LÝ NHIỀU AWS ACCOUNT